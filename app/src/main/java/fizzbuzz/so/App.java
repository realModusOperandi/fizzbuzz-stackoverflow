/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fizzbuzz.so;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;

public class App {
    public static void main(String[] args) throws Exception {
        OkHttpClient client = new OkHttpClient().newBuilder()
                .build();
        Request request = new Request.Builder()
                .url("https://www.google.com/search?q=fizzbuzz+java+stackoverflow")
                .method("GET", null)
                .build();
        Response response = client.newCall(request).execute();

        Document doc = Jsoup.parse(response.body().string());
        Elements hrefs = doc.select("#main .kCrYT a");

        outer: for (Element href : hrefs) {
            String url = href.attr("href");

            if (url.startsWith("/url?q=")) {
                url = url.substring("/url?q=".length());

                Request answerRequest = new Request.Builder()
                        .url(url)
                        .method("GET", null)
                        .build();
                Response answerResponse = client.newCall(answerRequest).execute();

                Document answerDoc = Jsoup.parse(answerResponse.body().string());
                Elements answerElements = answerDoc.select(".answercell code");

                for (Element answerElement : answerElements) {
                    String answer = answerElement.wholeText();
                    answer = answer.trim();

                    if (answer.contains("public class") && answer.contains("public static void main")) {
                        String packageName = "test";
                        String className = answer.substring(answer.indexOf("public class") + "public class".length(), answer.indexOf("{")).trim();

                        String strTmp = System.getProperty("java.io.tmpdir");

                        File sourceFile = new File(strTmp, packageName.replaceAll("\\.", "/") + "/" + className + ".java");
                        sourceFile.getParentFile().mkdirs();
                        sourceFile.createNewFile();

                        BufferedWriter writer = new BufferedWriter(new FileWriter(sourceFile));
                        String fileContents = "package " + packageName + ";\n" +
                                answer;
                        System.out.println("COMPILING FILE:\n" + fileContents);
                        writer.write(fileContents);
                        writer.flush();

                        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
                        compiler.run(null, null, null, sourceFile.getPath());

                        URLClassLoader classLoader = URLClassLoader.newInstance(new URL[] { new File(strTmp).toURI().toURL() });
                        Class<?> cls = Class.forName(packageName + "." + className, true, classLoader);
                        Method main = cls.getMethod("main", String[].class);

                        System.out.println("RUNNING FILE:");
                        main.invoke(null, (Object) new String[] {});

                        break outer;
                    }
                }
            }
        }
    }
}
